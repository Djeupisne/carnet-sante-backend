const express = require('express');
const router = express.Router();
const { User } = require('../models/User');
const { auth } = require('../middleware/auth');

// GET /api/doctors - R√©cup√©rer tous les m√©decins
router.get('/', auth, async (req, res) => {
  try {
    console.log('üìã R√©cup√©ration de tous les m√©decins...');
    
    const doctors = await User.findAll({
      where: { 
        role: 'doctor',
        isActive: true 
      },
      attributes: [
        'id', 'uniqueCode', 'firstName', 'lastName', 'email', 
        'specialty', 'phoneNumber', 'licenseNumber', 'biography',
        'languages', 'consultationPrice', 'availability', 
        'profilePicture', 'isActive', 'createdAt'
      ],
      order: [['firstName', 'ASC']]
    });

    console.log(`‚úÖ ${doctors.length} m√©decins trouv√©s`);

    res.json({
      success: true,
      data: doctors,
      count: doctors.length
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des m√©decins:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration des m√©decins',
      error: error.message
    });
  }
});

// GET /api/doctors/:id - R√©cup√©rer un m√©decin sp√©cifique
router.get('/:id', auth, async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üìã R√©cup√©ration du m√©decin ${id}...`);

    const doctor = await User.findOne({
      where: { 
        id, 
        role: 'doctor',
        isActive: true 
      },
      attributes: [
        'id', 'uniqueCode', 'firstName', 'lastName', 'email', 
        'specialty', 'phoneNumber', 'licenseNumber', 'biography',
        'languages', 'consultationPrice', 'availability', 
        'profilePicture', 'isActive', 'createdAt'
      ]
    });

    if (!doctor) {
      return res.status(404).json({
        success: false,
        message: 'M√©decin non trouv√©'
      });
    }

    console.log(`‚úÖ M√©decin trouv√©: ${doctor.firstName} ${doctor.lastName}`);
    
    res.json({
      success: true,
      data: doctor
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du m√©decin:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration du m√©decin',
      error: error.message
    });
  }
});

// GET /api/doctors/:id/availability - R√©cup√©rer la disponibilit√© d'un m√©decin
router.get('/:id/availability', auth, async (req, res) => {
  try {
    const { id } = req.params;
    const { date } = req.query;
    
    console.log(`üìã R√©cup√©ration de la disponibilit√© du m√©decin ${id} pour ${date}`);

    const doctor = await User.findOne({
      where: { 
        id, 
        role: 'doctor',
        isActive: true 
      },
      attributes: ['id', 'availability']
    });

    if (!doctor) {
      return res.status(404).json({
        success: false,
        message: 'M√©decin non trouv√©'
      });
    }

    // Simuler des cr√©neaux disponibles (√† remplacer par votre logique r√©elle)
    const availableSlots = [
      { date, startTime: '09:00', endTime: '09:30', isAvailable: true },
      { date, startTime: '09:30', endTime: '10:00', isAvailable: true },
      { date, startTime: '10:00', endTime: '10:30', isAvailable: true },
      { date, startTime: '14:00', endTime: '14:30', isAvailable: true },
      { date, startTime: '14:30', endTime: '15:00', isAvailable: true },
      { date, startTime: '15:00', endTime: '15:30', isAvailable: true },
      { date, startTime: '16:00', endTime: '16:30', isAvailable: true },
    ];

    res.json({
      success: true,
      data: availableSlots
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de la disponibilit√©:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration de la disponibilit√©',
      error: error.message
    });
  }
});

module.exports = router;