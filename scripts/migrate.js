const { sequelize } = require('../config/database');
const fs = require('fs').promises;
const path = require('path');
const { logger } = require('../utils/logger');

class MigrationRunner {
  constructor() {
    this.migrationsPath = path.join(__dirname, '../migrations');
  }

  async runMigrations() {
    try {
      console.log('üöÄ D√©marrage des migrations...');

      // Lire les fichiers de migration dans l'ordre
      const migrationFiles = await fs.readdir(this.migrationsPath);
      const sqlFiles = migrationFiles
        .filter(file => file.endsWith('.sql'))
        .sort(); // Tri naturel par nom de fichier

      for (const file of sqlFiles) {
        console.log(`üìã Ex√©cution de la migration: ${file}`);
        
        const filePath = path.join(this.migrationsPath, file);
        const sql = await fs.readFile(filePath, 'utf8');
        
        // Ex√©cuter le script SQL
        await sequelize.query(sql);
        console.log(`‚úÖ Migration ${file} ex√©cut√©e avec succ√®s`);
      }

      console.log('üéâ Toutes les migrations ont √©t√© ex√©cut√©es avec succ√®s');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'ex√©cution des migrations:', error);
      logger.error('Erreur de migration', { error: error.message });
      process.exit(1);
    }
  }
}

// Ex√©cuter les migrations si le script est appel√© directement
if (require.main === module) {
  const runner = new MigrationRunner();
  runner.runMigrations();
}

module.exports = MigrationRunner;