const jwt = require('jsonwebtoken');
const { User, AuditLog } = require('../models');
const validationService = require('../services/validationService');
const encryptionService = require('../services/encryptionService');

class AuthService {
  /**
   * G√©n√©rer un JWT token
   */
  generateToken(userId) {
    const token = jwt.sign(
      { userId },
      process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production-2024',
      { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
    );
    return token;
  }

  /**
   * V√©rifier un JWT token
   */
  verifyToken(token) {
    try {
      const decoded = jwt.verify(
        token,
        process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production-2024'
      );
      return decoded;
    } catch (error) {
      throw new Error('Token invalide ou expir√©');
    }
  }

  /**
   * Enregistrer un nouvel utilisateur
   */
  async register(userData) {
    try {
      console.log('\nüìù === D√âBUT ENREGISTREMENT UTILISATEUR ===');
      console.log('Donn√©es re√ßues:', {
        email: userData.email,
        firstName: userData.firstName,
        lastName: userData.lastName,
        role: userData.role
      });

      // √âtape 1: Validation
      console.log('√âtape 1: Validation des donn√©es');
      const validation = validationService.validateUserRegistration(userData);
      
      if (!validation.isValid) {
        console.log('Erreurs de validation:', validation.errors);
        const error = new Error('Donn√©es invalides');
        error.statusCode = 400;
        error.errors = validation.errors;
        throw error;
      }
      console.log('‚úì Validation r√©ussie');

      // √âtape 2: V√©rifier l'unicit√© de l'email
      console.log('√âtape 2: V√©rification de l\'unicit√© de l\'email');
      const existingUser = await User.findOne({
        where: { email: userData.email.toLowerCase() }
      });

      if (existingUser) {
        console.log('Email d√©j√† utilis√©:', userData.email);
        const error = new Error('Un utilisateur avec cet email existe d√©j√†');
        error.statusCode = 409;
        error.field = 'email';
        throw error;
      }
      console.log('‚úì Email disponible');

      // √âtape 3: Cr√©er l'utilisateur
      console.log('√âtape 3: Cr√©ation de l\'utilisateur');
      const user = await User.create({
        email: userData.email.toLowerCase(),
        password: userData.password,
        firstName: userData.firstName.trim(),
        lastName: userData.lastName.trim(),
        dateOfBirth: userData.dateOfBirth,
        gender: userData.gender,
        phoneNumber: userData.phoneNumber || null,
        role: userData.role || 'patient',
        isActive: true,
        isVerified: false,
        profileCompleted: false
      });

      console.log('‚úì Utilisateur cr√©√© avec succ√®s:', {
        id: user.id,
        uniqueCode: user.uniqueCode,
        email: user.email
      });

      // √âtape 4: G√©n√©rer le token JWT
      console.log('√âtape 4: G√©n√©ration du token JWT');
      const token = this.generateToken(user.id);
      console.log('‚úì Token g√©n√©r√©');

      // √âtape 5: Cr√©er un log d'audit
      console.log('√âtape 5: Cr√©ation du log d\'audit');
      try {
        await AuditLog.create({
          action: 'USER_REGISTRATION',
          userId: user.id,
          ipAddress: userData.ipAddress || '127.0.0.1',
          userAgent: userData.userAgent,
          details: {
            email: user.email,
            role: user.role,
            uniqueCode: user.uniqueCode
          }
        });
        console.log('‚úì Log d\'audit cr√©√©');
      } catch (auditError) {
        console.warn('‚ö†Ô∏è Erreur non-bloquante lors du log d\'audit:', auditError.message);
      }

      console.log('‚úì === ENREGISTREMENT R√âUSSI ===\n');

      // Retourner les donn√©es utilisateur (sans le mot de passe)
      return {
        success: true,
        message: 'Utilisateur cr√©√© avec succ√®s',
        user: this.formatUserResponse(user),
        token
      };

    } catch (error) {
      console.error('‚ùå ERREUR ENREGISTREMENT:', error.message);
      throw error;
    }
  }

  /**
   * Connexion utilisateur
   */
  async login(email, password, ipAddress, userAgent) {
    try {
      console.log('\nüîê === D√âBUT CONNEXION ===');
      console.log('Email:', email);

      // Validation basique
      if (!email || !password) {
        const error = new Error('Email et mot de passe requis');
        error.statusCode = 400;
        throw error;
      }

      // Chercher l'utilisateur
      const user = await User.findOne({
        where: { email: email.toLowerCase() }
      });

      if (!user) {
        console.log('Utilisateur non trouv√©');
        const error = new Error('Identifiants invalides');
        error.statusCode = 401;
        throw error;
      }

      // V√©rifier si le compte est verrouill√©
      if (user.isLocked()) {
        console.log('Compte verrouill√©');
        const error = new Error('Compte temporairement verrouill√©. R√©essayez dans 15 minutes.');
        error.statusCode = 423;
        throw error;
      }

      // V√©rifier le mot de passe
      const isPasswordValid = await user.comparePassword(password);

      if (!isPasswordValid) {
        console.log('Mot de passe incorrect, incr√©mentation des tentatives');
        await user.incLoginAttempts();
        const error = new Error('Identifiants invalides');
        error.statusCode = 401;
        throw error;
      }

      // R√©initialiser les tentatives et mettre √† jour lastLogin
      await user.update({
        loginAttempts: 0,
        lockUntil: null,
        lastLogin: new Date()
      });

      // G√©n√©rer le token
      const token = this.generateToken(user.id);

      // Log d'audit
      try {
        await AuditLog.create({
          action: 'USER_LOGIN',
          userId: user.id,
          ipAddress: ipAddress || '127.0.0.1',
          userAgent: userAgent
        });
      } catch (auditError) {
        console.warn('‚ö†Ô∏è Erreur non-bloquante lors du log d\'audit:', auditError.message);
      }

      console.log('‚úì === CONNEXION R√âUSSIE ===\n');

      return {
        success: true,
        message: 'Connexion r√©ussie',
        user: this.formatUserResponse(user),
        token
      };

    } catch (error) {
      console.error('‚ùå ERREUR CONNEXION:', error.message);
      throw error;
    }
  }

  /**
   * Obtenir l'utilisateur courant par ID
   */
  async getCurrentUser(userId) {
    try {
      const user = await User.findByPk(userId, {
        attributes: {
          exclude: ['password', 'resetToken', 'resetTokenExpiry', 'emailVerificationToken']
        }
      });

      if (!user) {
        const error = new Error('Utilisateur non trouv√©');
        error.statusCode = 404;
        throw error;
      }

      return {
        success: true,
        user: this.formatUserResponse(user)
      };

    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'utilisateur:', error.message);
      throw error;
    }
  }

  /**
   * Demande de r√©initialisation de mot de passe
   */
  async forgotPassword(email, ipAddress, userAgent) {
    try {
      const user = await User.findOne({
        where: { email: email.toLowerCase() }
      });

      // Toujours retourner le m√™me message pour la s√©curit√©
      if (!user) {
        console.log('Email non trouv√© pour r√©initialisation');
        return {
          success: true,
          message: 'Si un compte avec cet email existe, un lien de r√©initialisation a √©t√© envoy√©'
        };
      }

      // G√©n√©rer un token de r√©initialisation
      const resetToken = encryptionService.generateResetToken();
      const resetTokenExpiry = Date.now() + 3600000; // 1 heure

      await user.update({
        resetToken,
        resetTokenExpiry
      });

      // Log d'audit
      try {
        await AuditLog.create({
          action: 'PASSWORD_RESET_REQUEST',
          userId: user.id,
          ipAddress: ipAddress || '127.0.0.1',
          userAgent: userAgent
        });
      } catch (auditError) {
        console.warn('‚ö†Ô∏è Erreur non-bloquante lors du log d\'audit:', auditError.message);
      }

      // TODO: Envoyer un email avec le lien de r√©initialisation
      // await emailService.sendPasswordResetEmail(user.email, resetToken);

      console.log('Token de r√©initialisation g√©n√©r√© pour:', email);

      return {
        success: true,
        message: 'Si un compte avec cet email existe, un lien de r√©initialisation a √©t√© envoy√©'
      };

    } catch (error) {
      console.error('Erreur lors de la demande de r√©initialisation:', error.message);
      throw error;
    }
  }

  /**
   * R√©initialiser le mot de passe
   */
  async resetPassword(token, newPassword, ipAddress, userAgent) {
    try {
      // Validation
      if (!token || !newPassword) {
        const error = new Error('Token et nouveau mot de passe requis');
        error.statusCode = 400;
        throw error;
      }

      // Valider le mot de passe
      const passwordValidation = validationService.validatePassword(newPassword);
      if (!passwordValidation.isValid) {
        const error = new Error('Mot de passe invalide');
        error.statusCode = 400;
        error.errors = passwordValidation.errors;
        throw error;
      }

      // Trouver l'utilisateur avec ce token
      const user = await User.findOne({
        where: {
          resetToken: token,
          resetTokenExpiry: { [require('sequelize').Op.gt]: Date.now() }
        }
      });

      if (!user) {
        const error = new Error('Token de r√©initialisation invalide ou expir√©');
        error.statusCode = 400;
        throw error;
      }

      // Mettre √† jour le mot de passe
      await user.update({
        password: newPassword,
        resetToken: null,
        resetTokenExpiry: null,
        loginAttempts: 0,
        lockUntil: null
      });

      // Log d'audit
      try {
        await AuditLog.create({
          action: 'PASSWORD_RESET',
          userId: user.id,
          ipAddress: ipAddress || '127.0.0.1',
          userAgent: userAgent
        });
      } catch (auditError) {
        console.warn('‚ö†Ô∏è Erreur non-bloquante lors du log d\'audit:', auditError.message);
      }

      console.log('Mot de passe r√©initialis√© pour l\'utilisateur:', user.id);

      return {
        success: true,
        message: 'Mot de passe r√©initialis√© avec succ√®s'
      };

    } catch (error) {
      console.error('Erreur lors de la r√©initialisation du mot de passe:', error.message);
      throw error;
    }
  }

  /**
   * Logout (enregistrement dans les logs)
   */
  async logout(userId, ipAddress, userAgent) {
    try {
      await AuditLog.create({
        action: 'USER_LOGOUT',
        userId: userId,
        ipAddress: ipAddress || '127.0.0.1',
        userAgent: userAgent
      });

      return {
        success: true,
        message: 'D√©connexion r√©ussie'
      };

    } catch (error) {
      console.error('Erreur lors de la d√©connexion:', error.message);
      throw error;
    }
  }

  /**
   * Formater la r√©ponse utilisateur (exclure les champs sensibles)
   */
  formatUserResponse(user) {
    return {
      id: user.id,
      uniqueCode: user.uniqueCode,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role,
      gender: user.gender,
      dateOfBirth: user.dateOfBirth,
      phoneNumber: user.phoneNumber,
      isActive: user.isActive,
      isVerified: user.isVerified,
      profileCompleted: user.profileCompleted,
      profilePicture: user.profilePicture,
      timezone: user.timezone,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt
    };
  }
}

module.exports = new AuthService();